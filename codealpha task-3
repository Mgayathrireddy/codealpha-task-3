{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4a2d43e-a215-4c32-bb2a-5fdb3ad37d3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n",
    "import random\n",
    "import string\n",
    "import numpy as np\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from nltk.corpus import stopwords\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "\n",
    "# Download necessary NLTK resources\n",
    "nltk.download('punkt')\n",
    "nltk.download('wordnet')\n",
    "nltk.download('stopwords')\n",
    "\n",
    "class Chatbot:\n",
    "    def __init__(self):\n",
    "        self.lemmatizer = WordNetLemmatizer()\n",
    "        self.stop_words = set(stopwords.words('english'))\n",
    "        self.intents = {\n",
    "            \"greeting\": [\"Hello!\", \"Hi there!\", \"Greetings!\", \"How can I help you today?\"],\n",
    "            \"goodbye\": [\"Goodbye!\", \"See you later!\", \"Take care!\"],\n",
    "            \"thanks\": [\"You're welcome!\", \"No problem!\", \"Glad to help!\"],\n",
    "            \"default\": [\"Sorry, I didn't understand that. Can you rephrase?\"]\n",
    "        }\n",
    "\n",
    "    def preprocess(self, text):\n",
    "        # Tokenize, lemmatize and remove stop words\n",
    "        tokens = nltk.word_tokenize(text.lower())\n",
    "        tokens = [self.lemmatizer.lemmatize(word) for word in tokens if word not in self.stop_words and word not in string.punctuation]\n",
    "        return tokens\n",
    "\n",
    "    def respond(self, user_input):\n",
    "        # Basic pattern matching for responses\n",
    "        user_tokens = self.preprocess(user_input)\n",
    "        if any(token in user_tokens for token in ['hi', 'hello', 'hey']):\n",
    "            return random.choice(self.intents[\"greeting\"])\n",
    "        elif any(token in user_tokens for token in ['bye', 'goodbye']):\n",
    "            return random.choice(self.intents[\"goodbye\"])\n",
    "        elif any(token in user_tokens for token in ['thank', 'thanks']):\n",
    "            return random.choice(self.intents[\"thanks\"])\n",
    "        else:\n",
    "            return random.choice(self.intents[\"default\"])\n",
    "\n",
    "def main():\n",
    "    chatbot = Chatbot()\n",
    "    print(\"Chatbot: Hi! I'm a simple chatbot. Type 'exit' to end the conversation.\")\n",
    "    \n",
    "    while True:\n",
    "        user_input = input(\"You: \")\n",
    "        if user_input.lower() == 'exit':\n",
    "            print(\"Chatbot: Goodbye! Have a great day!\")\n",
    "            break\n",
    "        response = chatbot.respond(user_input)\n",
    "        print(f\"Chatbot: {response}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n",
    "    pip install punkt\n",
    "    \n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
